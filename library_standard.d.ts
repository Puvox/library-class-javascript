export declare function arrayValue(obj_arr: any, key: any, default_: any): any;
export declare function arrayValue(obj_arr: any, key: any, default_: any): any;
export declare function arrayValueLower(obj_arr: any, key: any, default_: any): any;
export declare function arrayValueLower(obj_arr: any, key: any, default_: any): any;
export declare function arrayValueUpper(obj_arr: any, key: any, default_: any): any;
export declare function arrayValueUpper(obj_arr: any, key: any, default_: any): any;
export declare function stringToArray(str: any, splitChar: any): any;
export declare function stringToArray(str: any, splitChar: any): any;
export declare function arrayColumn(array: any, columnName: any): any;
export declare function arrayColumn(array: any, col: any): any;
export declare function arrayColumn(array: any, columnName: any): any;
export declare function arrayColumn(array: any, col: any): any;
export declare function arrayUnique(array: any, removeEmpties: any): any;
export declare function arrayUnique(array: any, removeEmpties: any): any;
export declare function arrayMerge(ar1: any, ar2: any): any;
export declare function arrayMerge(ar1: any, ar2: any): any;
export declare function objectsArrayTill(arrayBlocks: any, key: any, value: any): {};
export declare function objectsArrayTill(arrayBlocks: any, key: any, value: any): {};
export declare function arrayRemoveEmpty(array: any): any;
export declare function arrayRemoveEmpty(array: any): any;
export declare function arrayLastMember(arr: any): any;
export declare function arrayLastMember(arr: any): any;
export declare function arrayLastItem(arr: any): any;
export declare function arrayLastItem(arr: any): any;
export declare function removeKeys(obj: any, keysArr: any): {};
export declare function removeKeys(obj: any, keysArr: any): {};
export declare function removeKeysExcept(obj: any, keysArr: any): {};
export declare function removeKeysExcept(obj: any, keysArr: any): {};
export declare function arrayDiff(source: any, comparedTo: any): any;
export declare function arrayDiff(source: any, comparedTo: any): any;
export declare function arrayIntersect(source: any, comparedTo: any): any;
export declare function arrayIntersect(source: any, comparedTo: any): any;
export declare function arrayDiffFull(o1: any, o2: any): any[];
export declare function arrayDiffFull(o1: any, o2: any): any[];
export declare function sortKeys(x: any, out?: {}): {};
export declare function sortKeys(x: any, out?: {}): {};
export declare function sortByValuesIntoArray(obj: any, ascending?: boolean): any;
export declare function sortByValuesIntoArray(obj: any, ascending?: boolean): any;
export declare function stringArrayToNumeric(arr: any): number[];
export declare function stringArrayToNumeric(arr: any): number[];
export declare function stringToArrayToNumeric(arr: any): number[];
export declare function stringToArrayToNumeric(arr: any): number[];
export declare function objectCopy(obj: any): any;
export declare function objectCopy(obj: any): any;
export declare function cloneObjectDestructuve(orig: any): any;
export declare function cloneObjectDestructuve(orig: any): any;
export declare function cloneObjectWithPrototype(orig: any): any;
export declare function cloneObjectWithPrototype(orig: any): any;
export declare function getKeyByValue(object: any, value: any): string | undefined;
export declare function getKeyByValue(object: any, value: any): string | undefined;
export declare function hasChildWithKeyValue(obj: any, targetKey: any, targetValue: any): boolean;
export declare function hasChildWithKeyValue(obj: any, targetKey: any, targetValue: any): boolean;
export declare function trigger_on_load(callerr: any, onInteractionInsteadComplete: any): void;
export declare function trigger_on_load(callerr: any, onInteractionInsteadComplete: any): void;
export declare function imagesLazyLoad(el_tag: any): void;
export declare function imagesLazyLoad(el_tag: any): void;
export declare function move_to_top_in_parent(el_tag: any): void;
export declare function move_to_top_in_parent(el_tag: any): void;
export declare function Append_To_Head2(elemntType: any, content: any): void;
export declare function Append_To_Head2(elemntType: any, content: any): void;
export declare function Append_To_Head(elemntType: any, content: any): void;
export declare function Append_To_Head(elemntType: any, content: any): void;
export declare function appendScript(url: any, callback: any, defer?: boolean): void;
export declare function appendScript(url: any, callback: any, defer?: boolean): void;
export declare function appendScript2(url: any): void;
export declare function appendScript2(url: any): void;
export declare function blackground2(): void;
export declare function blackground2(): void;
export declare function getFileExtension(filename: any): any;
export declare function getFileExtension(filename: any): any;
export declare function forEach(collection: any, callback: any, scope: any): void;
export declare function forEach(collection: any, callback: any, scope: any): void;
export declare function sanitize(str: any): any;
export declare function sanitize(str: any): any;
export declare function sanitize_key(str: any, use_dash: any): any;
export declare function sanitize_key(str: any, use_dash: any): any;
export declare function sanitize_key_dashed(str: any): any;
export declare function sanitize_key_dashed(str: any): any;
export declare function sanitize_variable_name(str: any): any;
export declare function sanitize_variable_name(str: any): any;
export declare function sanitize_text(str: any, use_dash?: boolean): any;
export declare function sanitize_text(str: any, use_dash?: boolean): any;
export declare function strip_non_word(str: any): any;
export declare function strip_non_word(str: any): any;
export declare function removeAllWhitespaces(content: any): any;
export declare function removeAllWhitespaces(content: any): any;
export declare function replaceAllOccurences(input: any, search: any, replacement: any): any;
export declare function replaceAllOccurences(input: any, search: any, replacement: any): any;
export declare function getVariableType(x: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "integer" | "float" | "array";
export declare function getVariableType(x: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "integer" | "float" | "array";
export declare function isInteger(number: unknown): boolean;
export declare const isInteger: (number: unknown) => boolean;
export declare function isNumeric(x: any): boolean;
export declare function isNumeric(x: any): boolean;
export declare function isDecimal(x: any): boolean;
export declare function isDecimal(x: any): boolean;
export declare function isBoolean(x: any): boolean;
export declare function isBoolean(x: any): boolean;
export declare function isBooleanReal(x: any): boolean;
export declare function isBooleanReal(x: any): boolean;
export declare function isString(x: any): boolean;
export declare function isString(s: any): boolean;
export declare function isString(x: any): boolean;
export declare function isString(s: any): boolean;
export declare function isObject(x: any): boolean;
export declare function isObject(o: any): boolean;
export declare function isObject(x: any): boolean;
export declare function isObject(o: any): boolean;
export declare function isJsonObject(data: any): boolean;
export declare function isJsonObject(data: any): boolean;
export declare function isArray(arg: any): arg is any[];
export declare const isArray: (arg: any) => arg is any[];
export declare function isSimpleVariableType(obj: any): boolean;
export declare function isSimpleVariableType(obj: any): boolean;
export declare function isSimpleVariableTypeName(typeName_: any): boolean;
export declare function isSimpleVariableTypeName(typeName_: any): boolean;
export declare function isNumericVariableType(obj: any): boolean;
export declare function isNumericVariableType(obj: any): boolean;
export declare function isNumericVariableTypeName(typeName_: any): boolean;
export declare function isNumericVariableTypeName(typeName_: any): boolean;
export declare function stringToBoolean(string: any): boolean;
export declare function stringToBoolean(string: any): boolean;
export declare function isException(e: any): any;
export declare function isException(e: any): any;
export declare function IsJsonString(str: any): boolean;
export declare function IsJsonString(str: any): boolean;
export declare function is_object(variable: any): boolean;
export declare function is_object(variable: any): boolean;
export declare function formItemsToJson(FormElement: any): {};
export declare function formItemsToJson(FormElement: any): {};
export declare function renameKey(obj: any, keyFrom: any, keyTo: any): any;
export declare function renameKey(obj: any, keyFrom: any, keyTo: any): any;
export declare function renameSubKey(obj: any, keyFrom: any, keyTo: any, strict?: boolean): any;
export declare function renameSubKey(obj: any, keyFrom: any, keyTo: any, strict?: boolean): any;
export declare function hasEmptyChild(obj: any): boolean;
export declare function hasEmptyChild(obj: any): boolean;
export declare function filterObject(obj: any, callback: any): any;
export declare function filterObject(obj: any, callback: any): any;
export declare function isBetween(a: any, b: any, c: any): boolean;
export declare function isBetween(a: any, b: any, c: any): boolean;
export declare function isBetweenEq(a: any, b: any, c: any): boolean;
export declare function isBetweenEq(a: any, b: any, c: any): boolean;
export declare function startsWithWhiteSpace(content: any): boolean;
export declare function startsWithWhiteSpace(content: any): boolean;
export declare function trimOnlyFromEnd(content: any): any;
export declare function trimOnlyFromEnd(content: any): any;
export declare function startsWith(content: any, what: any): any;
export declare function startsWith(content: any, what: any): any;
export declare function startsWithArray(content: any, array: any): boolean;
export declare function startsWithArray(content: any, array: any): boolean;
export declare function endsWith(content: any, what: any): any;
export declare function endsWith(content: any, what: any): any;
export declare function endsWithArray(content: any, array: any): boolean;
export declare function endsWithArray(content: any, array: any): boolean;
export declare function startLetters(str: any, amountOfLetters: any): any;
export declare function startLetters(str: any, amountOfLetters: any): any;
export declare function endLetters(str: any, amountOfLetters: any): any;
export declare function endLetters(str: any, amountOfLetters: any): any;
export declare function ConvertNumbToRoman(num: any): any;
export declare function ConvertNumbToRoman(num: any): any;
export declare function when_element_is_loaded(Id_or_class: any, functionname: any): void;
export declare function when_element_is_loaded(Id_or_class: any, functionname: any): void;
export declare function SetTitlee(title: any): void;
export declare function SetTitlee(title: any): void;
export declare function setUrl(urlPath: any, title: any): void;
export declare function setUrl(urlPath: any, title: any): void;
export declare function requestUri(url: any): any;
export declare function requestUri(url: any): any;
export declare function ArrayKeyExistss(keyname: any, array: any): boolean;
export declare function ArrayKeyExistss(keyname: any, array: any): boolean;
export declare function hashtageChangeOnClick(e: any): void;
export declare function hashtageChangeOnClick(e: any): void;
export declare function capitalizeFirstLetter(string: any): any;
export declare function capitalizeFirstLetter(string: any): any;
export declare function addQueryArg(name: any, value: any, url: any): string;
export declare function addQueryArg(name: any, value: any, url: any): string;
export declare function buildQueryString(params: any): any;
export declare function buildQueryString(params: any): any;
export declare function wpHomeUrl(): void;
export declare function wpHomeUrl(): void;
export declare function LoadYoutubeApi(callback: any): void;
export declare function LoadYoutubeApi(callback: any): void;
export declare function argvsString(): any;
export declare function argvsString(): any;
export declare function argvsArray(): any;
export declare function argvsArray(): any;
export declare function argvs(): {};
export declare function argvs(): {};
export declare function argv(which: any, def?: undefined): any;
export declare function argv(which: any, def?: undefined): any;
export declare function argvIsSet(which: any): boolean;
export declare function argvIsSet(which: any): boolean;
export declare function parseQuery(queryString: any): {};
export declare function parseQuery(queryString: any): {};
export declare function invertDictionary(obj: any): {};
export declare function invertDictionary(obj: any): {};
export declare function isElementInViewport(el: any): boolean;
export declare function isElementInViewport(el: any): boolean;
export declare function MakeIframeFullHeight(iframeElement: any, cycling: any, overwrite_margin: any): void;
export declare function MakeIframeFullHeight(iframeElement: any, cycling: any, overwrite_margin: any): void;
export declare function MakeIframeFullHeight(iframeElement: any, cycling: any, overwrite_margin: any): void;
export declare function MakeIframeFullHeight(iframeElement: any, cycling: any, overwrite_margin: any): void;
export declare function getYtIdFromURL(URLL: any): any;
export declare function getYtIdFromURL(URL_or_ID: any): any;
export declare function getYtIdFromURL(URLL: any): any;
export declare function getYtIdFromURL(URL_or_ID: any): any;
export declare function autoSizeTextareas(className: any): void;
export declare function autoSizeTextareas(className: any): void;
export declare function getAllMethods(obj: any, inherited_too: any): string[];
export declare function getAllMethods(obj: any, inherited_too: any): string[];
export declare function hasMethod(obj: any, funcName: any, inherited_too: any): boolean | null;
export declare function hasMethod(obj: any, funcName: any, inherited_too: any): boolean | null;
export declare function ConvertToHourMinSec(time: any): string;
export declare function ConvertToHourMinSec(time: any): string;
export declare function getWindowSize(): {
    x: number;
    y: number;
};
export declare function getWindowSize(): {
    x: number;
    y: number;
};
export declare function removeItem(arr: any, value: any): any;
export declare function removeItem(arr: any, value: any): any;
export declare function removeItemOnce(arr: any, value: any): any;
export declare function removeItemOnce(arr: any, value: any): any;
export declare function toggleItemInArray(array: any, value: any, condition: any): any;
export declare function toggleItemInArray(array: any, value: any, condition: any): any;
export declare function mergeDeep(target: any, source: any): any;
export declare function mergeDeep(target: any, source: any): any;
export declare function getScrollbarWidth(): number;
export declare function getScrollbarWidth(): number;
export declare function animationClick(element: any, animation: any, removeOrNot: any): void;
export declare function animationClick(element: any, animation: any, removeOrNot: any): void;
export declare function animationClickTarget(element: any, target: any, animation: any, removeOrNot: any): void;
export declare function animationClickTarget(element: any, target: any, animation: any, removeOrNot: any): void;
export declare namespace datetime {
    function isBetweenHMS(target: any, start: any, end: any, equality: any): void;
    function isBetweenHMS(target: any, start: any, end: any, equality: any): void;
    function equalDays(d1: any, d2: any): boolean;
    function equalDays(d1: any, d2: any): boolean;
    function IsTodayStart(dt: any): void;
    function IsTodayStart(dt: any): void;
    function GetWeekOfMonth(dt: any): void;
    function GetWeekOfMonth(dt: any): void;
    function GetWeekOfYear(dt: any): void;
    function GetWeekOfYear(dt: any): void;
    function GetQuarter(dt: any): void;
    function GetQuarter(dt: any): void;
    function NumberToHMSstring(hhmmss: any): void;
    function NumberToHMSstring(hhmmss: any): void;
    function addNumberToHMS(hhmmss: any, added_or_subtracted: any): void;
    function addNumberToHMS(hhmmss: any, added_or_subtracted: any): void;
    function DatetimeToStringUtc(dt: any, withMS?: boolean, withTZ?: boolean): string;
    function DatetimeToStringUtc(dt: any, withMS?: boolean, withTZ?: boolean): string;
    function DatetimeToStringLocal(dt: any, withMS?: boolean, withT?: boolean): any;
    function DatetimeToStringLocal(dt: any, withMS?: boolean, withT?: boolean): any;
    function StringToDatetimeUtc(str: any, format: any, culture: any): Date;
    function StringToDatetimeUtc(str: any, format: any, culture: any): Date;
    function StringToDatetimeLocal(str: any, format: any, culture: any): Date;
    function StringToDatetimeLocal(str: any, format: any, culture: any): Date;
    function StringToTimestamUtc(str: any, format: any, culture: any): number;
    function StringToTimestamUtc(str: any, format: any, culture: any): number;
    function DatetimeUtc(): Date;
    function DatetimeUtc(): Date;
    function UtcDatetime(): Date;
    function UtcDatetime(): Date;
    function TimestampUtc(): number;
    function TimestampUtc(): number;
    function UtcTimestamp(): number;
    function UtcTimestamp(): number;
    function DatetimeToTimestampUtc(dt: any): number;
    function DatetimeToTimestampUtc(dt: any): number;
    function UtcTimestampFrom(dt: any): number;
    function UtcTimestampFrom(dt: any): number;
    function TimestampUtcToDatetimeUtc(ts: any): Date;
    function TimestampUtcToDatetimeUtc(ts: any): Date;
    function UtcTimestampToUtcDatetime(ts: any): Date;
    function UtcTimestampToUtcDatetime(ts: any): Date;
    function MaxDate(d1: any, d2: any, d3?: null): void;
    function MaxDate(d1: any, d2: any, d3?: null): void;
    function MinDate(d1: any, d2: any, d3?: null): void;
    function MinDate(d1: any, d2: any, d3?: null): void;
    function localDatetimeToUtcString(dt: any): void;
    function localDatetimeToUtcString(dt: any): void;
    function areSameDays(d1: any, d2: any): void;
    function areSameDays(d1: any, d2: any): void;
    function GetDayOfYear(dt: any): any;
    function GetDayOfYear(dt: any): any;
    function StringToUtcString(str: any): any;
    function StringToUtcString(str: any): any;
    function UtcTimestampToLocalDatetime(ts: any): Date;
    function UtcTimestampToLocalDatetime(ts: any): Date;
    function UtcTimestampToUtcDatetimeString_OLD_CORRECT(epochtime: any, withTZ: any): string;
    function UtcTimestampToUtcDatetimeString_OLD_CORRECT(epochtime: any, withTZ: any): string;
    function UtcTimestampToUtcDatetimeString(epochtime: any, withTZ: any): string;
    function UtcTimestampToUtcDatetimeString(epochtime: any, withTZ: any): string;
    function getOffsetFromUtc(): number;
    function getOffsetFromUtc(): number;
    function stringToDate(str: any): Date;
    function stringToDate(str: any): Date;
    function msGoneAfter(date: any): number;
    function msGoneAfter(date: any): number;
    function getYMDHISFfromDate(dt: any, utc?: boolean): any[];
    function getYMDHISFfromDate(dt: any, utc?: boolean): any[];
    function getYMDHISFfromDateWithZeros(dt: any, utc?: boolean): {
        y: any;
        M: string;
        d: string;
        h: string;
        m: string;
        s: string;
        f: string;
    };
    function getYMDHISFfromDateWithZeros(dt: any, utc?: boolean): {
        y: any;
        M: string;
        d: string;
        h: string;
        m: string;
        s: string;
        f: string;
    };
    function prefixWithZero(num: any, digits: any): any;
    function prefixWithZero(num: any, digits: any): any;
    function currentDatetimeIs(targetDate: any): boolean;
    function currentDatetimeIs(targetDate: any): boolean;
    function dateCompare(date1: any, date2: any): 0 | 1 | -1;
    function dateCompare(date1: any, date2: any): 0 | 1 | -1;
    function dateTill(date1: any, date2: any): Date;
    function dateTill(date1: any, date2: any): Date;
    function secondsTill(date1: any, date2: any): number;
    function secondsTill(date1: any, date2: any): number;
    /**
    * Adds time to a date. Modelled after MySQL DATE_ADD function.
    * Example: dateAdd(new Date(), 'minute', 30)  //returns 30 minutes from now.
    * https://stackoverflow.com/a/1214753/18511
    *
    * @param date  Date to start with
    * @param interval  One of: year, quarter, month, week, day, hour, minute, second
    * @param units  Number of units of the given interval to add.
    */
    function add(date: any, interval: any, units: any): Date | undefined;
    /**
    * Adds time to a date. Modelled after MySQL DATE_ADD function.
    * Example: dateAdd(new Date(), 'minute', 30)  //returns 30 minutes from now.
    * https://stackoverflow.com/a/1214753/18511
    *
    * @param date  Date to start with
    * @param interval  One of: year, quarter, month, week, day, hour, minute, second
    * @param units  Number of units of the given interval to add.
    */
    function add(date: any, interval: any, units: any): Date | undefined;
    function addSeconds(date: any, seconds: any): Date;
    function addSeconds(date: any, seconds: any): Date;
    function addDays(date: any, days: any): Date;
    function addDays(date: any, days: any): Date;
    function daysBetween(a: any, b: any, utc?: boolean): number;
    function daysBetween(a: any, b: any, utc?: boolean): number;
}
export declare function spinner(action: any): void;
export declare function spinner(action: any): void;
export declare function contains(string: any, pattern: any): boolean;
export declare function contains(string: any, pattern: any): boolean;
export declare function hide_show_transprent(el: any, hide: any): void;
export declare function hide_show_transprent(el: any, hide: any): void;
export declare function get_extension_from_url(url: any): any;
export declare function get_extension_from_url(url: any): any;
export declare function occurences_amount(string: any, subString: any, allowOverlapping: any): any;
export declare function occurences_amount(string: any, subString: any, allowOverlapping: any): any;
export declare function readLineByLine(filePath: any, callback: any, linesSize?: number, delimiterN?: boolean): Promise<any>;
export declare function readLineByLine(filePath: any, callback: any, linesSize?: number, delimiterN?: boolean): Promise<any>;
export declare function linesAmountInFile(filePath: any, delimiterN?: boolean): Promise<any>;
export declare function linesAmountInFile(filePath: any, delimiterN?: boolean): Promise<any>;
export declare function oneSpace(cc: any): any;
export declare function oneSpace(cc: any): any;
export declare function removeFirstAndLastChar(cc: any): any;
export declare function removeFirstAndLastChar(cc: any): any;
export declare function getWithin_X(cc: any, x: any): any;
export declare function getWithin_X(cc: any, x: any): any;
export declare function getWithin_XY(cc: any, x: any, y: any): any;
export declare function getWithin_XY(cc: any, x: any, y: any): any;
export declare function removeIfOutsideQuotes(content: any, replaceWhat: any, replaceWith: any): any;
export declare function removeIfOutsideQuotes(content: any, replaceWhat: any, replaceWith: any): any;
export declare function splitBy_X_NotInside_Y(str: any, x: any, y: any): any;
export declare function splitBy_X_NotInside_Y(str: any, x: any, y: any): any;
export declare function splitBy_X_NotInside_YZ(str: any, by: any, y: any, z: any): any;
export declare function splitBy_X_NotInside_YZ(str: any, by: any, y: any, z: any): any;
export declare function splitOnlyFirstOccurence(str: any, what: any): any;
export declare function splitOnlyFirstOccurence(str: any, what: any): any;
export declare function splitByEqualNotInsideDoubleQuotes(str: any): any;
export declare function splitByEqualNotInsideDoubleQuotes(str: any): any;
export declare function splitByEqualNotInsideDoubleQuotesAndDoubleEquals(str: any): any;
export declare function splitByEqualNotInsideDoubleQuotesAndDoubleEquals(str: any): any;
export declare function splitByNotInside2(str: any, splitChar: any, notInsideCharStart: any, notInsideCharEnd: any): void;
export declare function splitByNotInside2(str: any, splitChar: any, notInsideCharStart: any, notInsideCharEnd: any): void;
export declare function getFromX_tillY_ExcudingQuotes(content: any, from: any, till: any, regex_index: any): string;
export declare function getFromX_tillY_ExcudingQuotes(content: any, from: any, till: any, regex_index: any): string;
export declare function preg_quote(str: any, delimiter: any): string;
export declare function preg_quote(str: any, delimiter: any): string;
export declare function escapeRegExp(string: any): any;
export declare function escapeRegExp(string: any): any;
export declare function splitStringIntoChars(str: any): any;
export declare function splitStringIntoChars(str: any): any;
export declare function empty(MyVar: any): boolean;
export declare function empty(MyVar: any): boolean;
export declare function is_empty_or_undefined(MyVar: any): boolean;
export declare function is_empty_or_undefined(MyVar: any): boolean;
export declare function isEmptyValue(input: any): boolean;
export declare function isEmptyValue(input: any): boolean;
export declare function removeEmptyValue(obj: any): any;
export declare function removeEmptyValue(obj: any): any;
export declare function isIterable(obj: any): boolean;
export declare function isIterable(obj: any): boolean;
export declare function insertRedErrorLine(array_: any): void;
export declare function insertRedErrorLine(array_: any): void;
export declare function stripTags(input: any, allowed: any): any;
export declare function stripTags(input: any, allowed: any): any;
export declare function br2nl(content: any): any;
export declare function br2nl(content: any): any;
export declare function jquery_popup(element: any, isModal: any, params: any): any;
export declare function jquery_popup(element: any, isModal: any, params: any): any;
export declare function jquery_popup_once(cookiename: any, key: any, text: any, duration: any, onComplete: any): void;
export declare function jquery_popup_once(cookiename: any, key: any, text: any, duration: any, onComplete: any): void;
export declare function jquery_popup_one_time_checkbox(cookiename: any, key: any, text: any, callable_func: any, defaultCheckboxTxt: any): void;
export declare function jquery_popup_one_time_checkbox(cookiename: any, key: any, text: any, callable_func: any, defaultCheckboxTxt: any): void;
export declare function dialog_dont_show_again(event: any, key: any, cookiename: any): void;
export declare function dialog_dont_show_again(event: any, key: any, cookiename: any): void;
export declare function dialogClose(): void;
export declare function dialogClose(): void;
export declare function mergeObjects(obj1: any, obj2: any): any;
export declare function mergeObjects(obj1: any, obj2: any): any;
export declare function objectMap(obj: any, fn: any): any;
export declare function objectMap(obj: any, fn: any): any;
export declare function fancyTimeFormat(time: any): string;
export declare function fancyTimeFormat(time: any): string;
export declare function jsonToArray(json_data: any): any[][];
export declare function jsonToArray(json_data: any): any[][];
export declare function fixEntitiedJson(json_data: any): any;
export declare function fixEntitiedJson(json_data: any): any;
export declare function setSelectByOptionName(selectEl: any, optName: any): void;
export declare function setSelectByOptionName(selectEl: any, optName: any): void;
export declare function ScrollTo(el: any, func: any, offset_distance: any): void;
export declare function ScrollTo(el: any, func: any, offset_distance: any): void;
export declare function sleep(ms: any): Promise<any>;
export declare function sleep(ms: any): Promise<any>;
export declare function setTimeout_safe(done: any, ms: any): () => void;
export declare function setTimeout_safe(done: any, ms: any): () => void;
export declare function scrollToBottom2(el: any): void;
export declare function scrollToBottom2(el: any): void;
export declare function scrollToBottom(el_or_id: any): void;
export declare function scrollToBottom(el_or_id: any): void;
export declare function scrollToBottom3(el_or_id: any): void;
export declare function scrollToBottom3(el_or_id: any): void;
export declare function smooth_scroll_to(selector: any): void;
export declare function smooth_scroll_to(selector: any): void;
export declare function addLine(selector: any, text: any, first_or_last: any): void;
export declare function addLine(selector: any, text: any, first_or_last: any): void;
export declare function removeLine(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
export declare function removeLine(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
export declare function removeElementIfMoreThan(el: any, amount: any, first_or_last: any): void;
export declare function removeElementIfMoreThan(el: any, amount: any, first_or_last: any): void;
export declare function removeElementIfMoreThanNEW(el: any, amount: any, first_or_last: any): any;
export declare function removeElementIfMoreThanNEW(el: any, amount: any, first_or_last: any): any;
export declare function removeLine_old(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
export declare function removeLine_old(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
export declare function removeLineFromTextarea(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
export declare function removeLineFromTextarea(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
export declare function removeLineFromText(text: any, first_or_last: any, ifMoreThanXlines: any): any;
export declare function removeLineFromText(text: any, first_or_last: any, ifMoreThanXlines: any): any;
export declare function arrayPart(array_: any, amount_: any, from: any): any;
export declare function arrayPart(array_: any, amount_: any, from: any): any;
export declare function arrayInsertAt(array: any, index: any, value: any): any;
export declare function arrayInsertAt(array: any, index: any, value: any): any;
export declare function executeAfterTry(el: any, func: any, num: any): void;
export declare function executeAfterTry(el: any, func: any, num: any): void;
export declare function waitExecute(el: any, func: any): void;
export declare function waitExecute(el: any, func: any): void;
export declare function consoleLogColor(text: any, backgroundColor?: null, foregroundColor?: null): void;
export declare function consoleLogColor(text: any, backgroundColor?: null, foregroundColor?: null): void;
export declare function toggleWindowsMessages_WindowConfirm(): ((message?: string | undefined) => boolean) & typeof confirm;
export declare function toggleWindowsMessages_WindowConfirm(): ((message?: string | undefined) => boolean) & typeof confirm;
export declare function toggleWindowsMessages_WindowAlert(): ((message?: any) => void) & typeof alert;
export declare function toggleWindowsMessages_WindowAlert(): ((message?: any) => void) & typeof alert;
export declare function toggleWindowsMessages(enable: any): void;
export declare function toggleWindowsMessages(enable: any): void;
export declare function suspressMessagesExecution(func: any): void;
export declare function suspressMessagesExecution(func: any): void;
export declare function in_array(needle: any, haystack: any): boolean;
export declare function in_array(needle: any, haystack: any): boolean;
export declare function CreateFrameIn(targetEl: any, frameContent: any, MakeItfullWH: any): HTMLIFrameElement;
export declare function CreateFrameIn(targetEl: any, frameContent: any, MakeItfullWH: any): HTMLIFrameElement;
export declare function makeAllATargetBlank(el: any): void;
export declare function makeAllATargetBlank(el: any): void;
export declare function createDropdownFrom(arr: any, elementId: any, jqueriUi: any, appendToElement: any): string;
export declare function createDropdownFrom(arr: any, elementId: any, jqueriUi: any, appendToElement: any): string;
export declare function b64EncodeUnicode(str: any): string;
export declare function b64EncodeUnicode(str: any): string;
export declare function b64DecodeUnicode(str: any): string;
export declare function b64DecodeUnicode(str: any): string;
export declare function round(num: any, decimals: any): number;
export declare function round(num: any, decimals: any): number;
export declare function basename(path: any): any;
export declare function basename(path: any): any;
export declare function show_my_popup(TEXTorID: any, AdditionalStyles: any): void;
export declare function show_my_popup(TEXTorID: any, AdditionalStyles: any): void;
export declare function my_popup_closee(RandomIDD: any): void;
export declare function my_popup_closee(RandomIDD: any): void;
export declare function loaderImage(circleColor: any): string;
export declare function loaderImage(circleColor: any): string;
export declare function Loader(ShowOrHide: any, style: any, content_To_show: any): void;
export declare function Loader(ShowOrHide: any, style: any, content_To_show: any): void;
export declare function myyAjaxRequest(parameters: any, url: any, method: any, func: any, ShowBlackground: any): void;
export declare function myyAjaxRequest(parameters: any, url: any, method: any, func: any, ShowBlackground: any): void;
export declare function hide_popuping_divs(classnameee: any): void;
export declare function hide_popuping_divs(classnameee: any): void;
export declare function get(url: any, parameters: any): Promise<any>;
export declare function get(url: any, parameters: any): Promise<any>;
export declare function getJSON(url: any, parameters: any): Promise<any>;
export declare function getJSON(url: any, parameters: any): Promise<any>;
export declare function post(url: any, params: any, callback_1: any, callback_2: any): Promise<void>;
export declare function post(url: any, params: any, callback_1: any, callback_2: any): Promise<void>;
export declare function stringifyPretty(obj: any): string;
export declare function stringifyPretty(obj: any): string;
export declare function responseStringify(obj_or_text: any): any;
export declare function responseStringify(obj_or_text: any): any;
export declare function getElementById_FROM_PARENT(req: any): any;
export declare function getElementById_FROM_PARENT(req: any): any;
export declare function inArray(needle: any, haystack: any): boolean;
export declare function inArray(needle: any, haystack: any): any;
export declare function inArray(needle: any, haystack: any): boolean;
export declare function inArray(needle: any, haystack: any): any;
export declare function inKeys(key: any, obj: any): boolean;
export declare function inKeys(key: any, obj: any): boolean;
export declare function partialObject(object_: any, array_: any): {};
export declare function partialObject(object_: any, array_: any): {};
export declare function array_column_with_keys(object_: any, keyName_: any): {};
export declare function array_column_with_keys(object_: any, keyName_: any): {};
export declare function GetQueryParams(url: any): {};
export declare function GetQueryParams(url: any): {};
export declare function URLParser(url: any): {
    getHost: () => string;
    getHostName: () => string;
    getPath: () => string;
    getHash: () => string;
    getParams: () => any;
    getQuery: () => string;
    setHash: (value: any) => string;
    setParam: (name: any, value: any) => string;
    getParam: (name: any) => string | undefined;
    hasParam: (name: any) => true | undefined;
    removeParam: (name: any) => string;
};
export declare function URLParser(url: any): {
    getHost: () => string;
    getHostName: () => string;
    getPath: () => string;
    getHash: () => string;
    getParams: () => any;
    getQuery: () => string;
    setHash: (value: any) => string;
    setParam: (name: any, value: any) => string;
    getParam: (name: any) => string | undefined;
    hasParam: (name: any) => true | undefined;
    removeParam: (name: any) => string;
};
export declare function parsePOST(request: any, callback: any): void;
export declare function parsePOST(request: any, callback: any): void;
export declare function ChangeSocialShareUrls(elemnt: any, newurl: any, title: any): void;
export declare function ChangeSocialShareUrls(elemnt: any, newurl: any, title: any): void;
export declare function ReplaceParameterInQuery(url: any, param_name: any, param_new_val: any): any;
export declare function ReplaceParameterInQuery(url: any, param_name: any, param_new_val: any): any;
export declare function refferer_is_same_domain(): boolean;
export declare function refferer_is_same_domain(): boolean;
export declare function DoPrevent(e: any): void;
export declare function DoPrevent(e: any): void;
export declare function preventDefaultForAll(instantly: any): void;
export declare function preventDefaultForAll(instantly: any): void;
export declare function addHovered(elem: any): void;
export declare function addHovered(elem: any): void;
export declare function radiobox_onchange_hider(selector: any, desiredvalue: any, target_hidding_selector: any, SHOW_or_hide: any, ...args: any[]): void;
export declare function radiobox_onchange_hider(selector: any, desiredvalue: any, target_hidding_selector: any, SHOW_or_hide: any, ...args: any[]): void;
export declare function GetRandomFromArray(my_array: any): any;
export declare function GetRandomFromArray(my_array: any): any;
export declare function array_shuffle(array: any): any;
export declare function array_shuffle(array: any): any;
export declare function showYtVideo(options: any): void;
export declare function showYtVideo(options: any): void;
export declare function FadeOut_modalpp(): void;
export declare function FadeOut_modalpp(): void;
export declare function forEachDefine(): void;
export declare function forEachDefine(): void;
export declare function forEachDefine2(): void;
export declare function forEachDefine2(): void;
export declare function filterDefine(): void;
export declare function filterDefine(): void;
export declare function filterDefine2(): void;
export declare function filterDefine2(): void;
export declare function var_dump(array: any): void;
export declare function var_dump(array: any): void;
export declare function postForm(params: any, ConfirmMessage: any, path: any, method: any, targett: any): void;
export declare function postForm(params: any, ConfirmMessage: any, path: any, method: any, targett: any): void;
export declare function SetShowHint(elemnt: any, text: any, left: any, top: any): void;
export declare function SetShowHint(elemnt: any, text: any, left: any, top: any): void;
export declare function Balance_Target_Image(img: any, widthh: any, heightt: any): void;
export declare function Balance_Target_Image(img: any, widthh: any, heightt: any): void;
export declare function Balanced_Image_proportions(classname: any, widthh: any, heightt: any, parentClassname: any): void;
export declare function Balanced_Image_proportions(classname: any, widthh: any, heightt: any, parentClassname: any): void;
export declare function show_after_pageload(el: any): void;
export declare function show_after_pageload(el: any): void;
export declare function hide_after_pageload(el: any): void;
export declare function hide_after_pageload(el: any): void;
export declare function Highlight_Current_Menu_link(Added_class_name: any, Ancestor_to_search_in: any, link_to_find: any): void;
export declare function Highlight_Current_Menu_link(Added_class_name: any, Ancestor_to_search_in: any, link_to_find: any): void;
export declare function RemoveHashString(str: any): any;
export declare function RemoveHashString(str: any): any;
export declare function arrayRemoveValue(array: any, value: any): any[];
export declare function arrayRemoveValue(array: any, value: any): any[];
export declare function getCharsFromStart(str: any, amount: any): any;
export declare function getCharsFromStart(str: any, amount: any): any;
export declare function getCharsFromEnd(str: any, amount: any): any;
export declare function getCharsFromEnd(str: any, amount: any): any;
export declare function GetTopLeft(myyElement: any): {
    lefttt: number;
    toppp: number;
};
export declare function GetTopLeft(myyElement: any): {
    lefttt: number;
    toppp: number;
};
export declare function GetOffset(object: any, offset: any): void;
export declare function GetOffset(object: any, offset: any): void;
export declare function GetScrolled(object: any, scrolled: any): void;
export declare function GetScrolled(object: any, scrolled: any): void;
export declare function MakeFixed(selector: any, ExtraHeightToBody: any): void;
export declare function MakeFixed(selector: any, ExtraHeightToBody: any): void;
export declare function triggerWhenElementInView(el: any, func: any): void;
export declare function triggerWhenElementInView(el: any, func: any): void;
export declare function compare(a: any, operator: any, b: any): boolean;
export declare function compare(a: any, operator: any, b: any): boolean;
export declare function calculate(a: any, operator: any, b: any): any;
export declare function calculate(a: any, operator: any, b: any): any;
export declare function RandomNum(maxNum: any): number;
export declare function RandomNum(maxNum: any): number;
export declare function random_number(Length: any): number;
export declare function random_number(Length: any): number;
export declare function randomNumber(Length: any): number;
export declare function randomNumber(Length: any): number;
export declare function random_number_minmax(min: any, max: any): any;
export declare function random_number_minmax(min: any, max: any): any;
export declare function randomString(Length: any): string;
export declare function randomString(Length: any): string;
export declare function shuffle_Word(word: any): string;
export declare function shuffle_Word(word: any): string;
export declare function youtubeImage(id: any, quality: any): string;
export declare function youtubeImage(id: any, quality: any): string;
export declare function IsMobileDevice(simpleORfull: any): any;
export declare function IsMobileDevice(simpleORfull: any): any;
export declare function backToTopBind(el: any): void;
export declare function backToTopBind(el: any): void;
export declare function enable_jquery_errors(): void;
export declare function enable_jquery_errors(): void;
export declare function telegramMessage(text: any, chat_id: any, bot_key: any, extra_opts?: {}): Promise<any>;
export declare function telegramMessage(text: any, chat_id: any, bot_key: any, extra_opts?: {}): Promise<any>;
export declare const telegram_interval_ms: number;
export declare const telegram_last_sent_time: number;
export declare function telegramMessageCached(text: any, chat_id: any, bot_key: any, extra_opts?: {}, customCacheId?: null): Promise<any>;
export declare function telegramMessageCached(text: any, chat_id: any, bot_key: any, extra_opts?: {}, customCacheId?: null): Promise<any>;
export declare function openUrlInBrowser(url: any): void;
export declare function openUrlInBrowser(url: any): void;
export declare function stringify(obj_or_str: any): any;
export declare function stringify(obj_or_str: any): any;
export declare function stringify_plain(data: any): string;
export declare function stringify_plain(data: any): string;
export declare function CopyObject(obj: any): any;
export declare function CopyObject(obj: any): any;
export declare function uniqId(obj_or_str: any): any;
export declare function uniqId(obj_or_str: any): any;
export declare function stringifyWithUndefined(obj: any): string;
export declare function stringifyWithUndefined(obj: any): string;
export declare function md5(str: any): any;
export declare function md5(str: any): any;
export declare function jsonConcat(o1: any, o2: any): any;
export declare function jsonConcat(o1: any, o2: any): any;
export declare function fetch(url: any, postOptions?: null, opts?: {}): Promise<string>;
export declare function fetch(url: any, postOptions?: null, opts?: {}): Promise<string>;
export declare function getRemoteData(url: any, postOptions?: null, opts?: {}): Promise<string>;
export declare function getRemoteData(url: any, postOptions?: null, opts?: {}): Promise<string>;
export declare function unTrailingSlash(str: any): any;
export declare function unTrailingSlash(str: any): any;
export declare function trailingSlash(str: any): string;
export declare function trailingSlash(str: any): string;
export declare const privateAppName__: null;
export declare function setAppName(name: any): void;
export declare function setAppName(name: any): void;
export declare function getAppName(): never;
export declare function getAppName(): never;
export declare namespace Cookies {
    function get(a: any, b: any): any;
    function get(a: any, b: any): any;
    function set(a: any, b: any, c: any): any;
    function set(a: any, b: any, c: any): any;
    function remove(a: any, b: any): any;
    function remove(a: any, b: any): any;
    function append(name: any, value: any, attributes: any): any;
    function append(name: any, value: any, attributes: any): any;
    function isset(cookiename: any): boolean;
    function isset(cookiename: any): boolean;
    function getOption(cookieName: any, key: any, defaultValue: any): any;
    function getOption(cookieName: any, key: any, defaultValue: any): any;
    function setOption(cookieName: any, key: any, value: any, attributes: any): {};
    function setOption(cookieName: any, key: any, value: any, attributes: any): {};
    function removeOption(cookieName: any, key: any, attributes: any): {};
    function removeOption(cookieName: any, key: any, attributes: any): {};
    function getOptionObject(cookieName: any, key: any): any;
    function getOptionObject(cookieName: any, key: any): any;
    function setOptionObject(cookieName: any, key: any, subKey: any, subValue: any): void;
    function setOptionObject(cookieName: any, key: any, subKey: any, subValue: any): void;
    function setOptionArray(cookieName: any, key: any, subValue: any, Add_or_remove: any): void;
    function setOptionArray(cookieName: any, key: any, subValue: any, Add_or_remove: any): void;
    function cookies_instance(): null;
    function cookies_instance(): null;
    const cookies_inited: null;
    function cookies(): any;
}
export declare namespace cache {
    export function helper_read(groupName: any, storageType: any, expireSeconds?: number): any;
    export function helper_read(groupName: any, storageType: any, expireSeconds?: number): any;
    export function helper_write(groupName: any, content: any, storageType: any): true | undefined;
    export function helper_write(groupName: any, content: any, storageType: any): true | undefined;
    export function helper_delete(groupName: any, storageType: any): true | undefined;
    export function helper_delete(groupName: any, storageType: any): true | undefined;
    export function get(groupName: any, defaultVal?: null, storageType?: string, expireSeconds?: number): any;
    export function get(groupName: any, defaultVal?: null, storageType?: string, expireSeconds?: number): any;
    export function set(groupName: any, content: any, storageType?: string): void;
    export function set(groupName: any, content: any, storageType?: string): void;
    function _delete(groupName: any, storageType?: string): void;
    export function _delete(groupName: any, storageType?: string): void;
    export { _delete as delete };
    export function getChild(groupName: any, optName: any, defaultVal?: null, storageType?: string, expireSeconds?: number): any;
    export function getChild(groupName: any, optName: any, defaultVal?: null, storageType?: string, expireSeconds?: number): any;
    export function setChild(groupName: any, optName: any, val: any, storageType?: string): void;
    export function setChild(groupName: any, optName: any, val: any, storageType?: string): void;
    export function deleteChild(groupName: any, optName: any, storageType?: string): void;
    export function deleteChild(groupName: any, optName: any, storageType?: string): void;
    export namespace file {
        const customCacheDir: null;
        function get_dir(): string;
        function get_dir(): string;
        function set_dir(dir: any, auto_clear_seconds?: null): any;
        function set_dir(dir: any, auto_clear_seconds?: null): any;
        function filePath(uniqFileName: any): any;
        function filePath(uniqFileName: any): any;
        function get(uniqFileName: any, defaultContent?: string, expire_seconds?: number, decode?: boolean): any;
        function get(uniqFileName: any, defaultContent?: string, expire_seconds?: number, decode?: boolean): any;
        function set(uniqFileName: any, content: any): void;
        function set(uniqFileName: any, content: any): void;
        const containerDefaultPrefix: string;
        const tempIds: {};
        function idForContent(slugOrContent: any): any;
        function idForContent(slugOrContent: any): any;
        function existsId(containerSlug: any, id: any): boolean;
        function existsId(containerSlug: any, id: any): boolean;
        function getIds(containerSlug: any): any;
        function getIds(containerSlug: any): any;
        function setIds(containerSlug: any, idsDict: any): void;
        function setIds(containerSlug: any, idsDict: any): void;
        function addId(containerSlug: any, id: any): void;
        function addId(containerSlug: any, id: any): void;
        function addIdIfNotExists(containerSlug: any, id: any): boolean;
        function addIdIfNotExists(containerSlug: any, id: any): boolean;
    }
}
export declare namespace file_1 {
    export function set_module(module: any): void;
    export function set_module(module: any): void;
    export function fs(): any;
    export function fs(): any;
    export function os(): any;
    export function os(): any;
    export function path(): any;
    export function path(): any;
    export function tempDir(): any;
    export function tempDir(): any;
    export function exists(filePath: any): any;
    export function exists(filePath: any): any;
    export function mtime(filePath: any): any;
    export function mtime(filePath: any): any;
    function _delete(filePath: any): any;
    export function _delete(filePath: any): any;
    export { _delete as delete };
    export function unlink(filePath: any): any;
    export function unlink(filePath: any): any;
    export function createDirectory(dirPath: any): any;
    export function createDirectory(dirPath: any): any;
    export function read(filePath: any, defaultContent?: string): any;
    export function read(filePath: any, defaultContent?: string): any;
    export function write(filePath: any, content: any): void;
    export function write(filePath: any, content: any): void;
    export function getFilesListFromDir(dir: any): any[];
    export function getFilesListFromDir(dir: any): any[];
}
export { file_1 as file };
export declare function catchUnhandledExceptions(callback: any): void;
export declare function catchUnhandledExceptions(callback: any): void;
export declare const keys: {
    (o: object): string[];
    (o: {}): string[];
};
export declare function values(x: any): any;
export declare function values(x: any): any;
export declare function extend(...args: any[]): any;
export declare function extend(...args: any[]): any;
export declare function clone(x: any): any;
export declare function clone(x: any): any;
export declare function index(x: any): Set<any>;
export declare function index(x: any): Set<any>;
export declare function ordered(x: any): any;
export declare function ordered(x: any): any;
export declare function unique(x: any): any[];
export declare function unique(x: any): any[];
export declare function arrayConcat(a: any, b: any): any;
export declare function arrayConcat(a: any, b: any): any;
export declare function toArray(object: any): any;
export declare function toArray(object: any): any;
export declare function isEmpty(object: any): boolean;
export declare function isEmpty(object: any): boolean;
export declare function keysort(x: any, out?: {}): {};
export declare function keysort(x: any, out?: {}): {};
export declare function indexBy(x: any, k: any, out?: {}): {};
export declare function indexBy(x: any, k: any, out?: {}): {};
export declare function groupBy(x: any, k: any, out?: {}): {};
export declare function groupBy(x: any, k: any, out?: {}): {};
export declare function filterBy(x: any, k: any, value?: undefined, out?: any[]): any[];
export declare function filterBy(x: any, k: any, value?: undefined, out?: any[]): any[];
export declare function sortBy(array: any, key: any, descending?: boolean, direction?: number): any;
export declare function sortBy(array: any, key: any, descending?: boolean, direction?: number): any;
export declare function sortBy2(array: any, key1: any, key2: any, descending?: boolean, direction?: number): any;
export declare function sortBy2(array: any, key1: any, key2: any, descending?: boolean, direction?: number): any;
export declare function flatten(x: any, out?: any[]): any[];
export declare function flatten(x: any, out?: any[]): any[];
export declare function pluck(x: any, k: any): any;
export declare function pluck(x: any, k: any): any;
export declare function omit(x: any, ...args: any[]): any;
export declare function omit(x: any, ...args: any[]): any;
export declare function sum(...xs: any[]): any;
export declare function sum(...xs: any[]): any;
export declare function deepExtend(...xs: any[]): any;
export declare function deepExtend(...xs: any[]): any;
export declare const isNumber: (number: unknown) => boolean;
export declare function hasProps(o: any): boolean;
export declare function hasProps(o: any): boolean;
export declare function isRegExp(o: any): boolean;
export declare function isRegExp(o: any): boolean;
export declare function isDictionary(o: any): boolean;
export declare function isDictionary(o: any): boolean;
export declare function isStringCoercible(x: any): any;
export declare function isStringCoercible(x: any): any;
export declare function prop(o: any, k: any): any;
export declare function prop(o: any, k: any): any;
export declare function getValueFromKeysInArray(object: any, array: any): any;
export declare function getValueFromKeysInArray(object: any, array: any): any;
export declare function asFloat(x: any): number;
export declare function asFloat(x: any): number;
export declare function asInteger(x: any): number;
export declare function asInteger(x: any): number;
export declare function parseTimeframe(timeframe: any): number;
export declare function parseTimeframe(timeframe: any): number;
export declare function roundTimeframe(timeframe: any, timestamp: any, direction?: any): number;
export declare function roundTimeframe(timeframe: any, timestamp: any, direction?: any): number;
export declare function json(data: any, params?: undefined): string;
export declare function json(data: any, params?: undefined): string;
export declare function isJsonEncodedObject(object: any): boolean;
export declare function isJsonEncodedObject(object: any): boolean;
export declare function encode_html_entities(content: any): any;
export declare function encode_html_entities(content: any): any;
export declare function precisionFromString(string: any): any;
export declare function precisionFromString(string: any): any;
export declare function numberToString(x: any): any;
export declare function numberToString(x: any): any;
export declare const isBrowser: boolean;
export declare const isElectron: boolean;
export declare const isWebWorker: boolean;
export declare const isWindows: boolean;
export declare const isNode: boolean;
export declare const defaultFetch: typeof globalThis.fetch;
export declare function uuid(a: any): any;
export declare function uuid(a: any): any;
export declare function capitalize(s: any): any;
export declare function capitalize(s: any): any;
export declare function strip(s: any): any;
export declare function strip(s: any): any;
export declare const now: () => number;
export declare const milliseconds: () => number;
export declare function seconds(): number;
export declare function seconds(): number;
//# sourceMappingURL=library_standard.d.ts.map