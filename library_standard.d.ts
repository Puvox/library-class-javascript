export default puvox_library;
declare namespace puvox_library {
    export function arrayValue(obj_arr: any, key: any, default_: any): any;
    export function arrayValue(obj_arr: any, key: any, default_: any): any;
    export function arrayValueLower(obj_arr: any, key: any, default_: any): any;
    export function arrayValueLower(obj_arr: any, key: any, default_: any): any;
    export function arrayValueUpper(obj_arr: any, key: any, default_: any): any;
    export function arrayValueUpper(obj_arr: any, key: any, default_: any): any;
    export function stringToArray(str: any, splitChar: any): any;
    export function stringToArray(str: any, splitChar: any): any;
    export function arrayColumn(array: any, columnName: any): any;
    export function arrayColumn(array: any, col: any): any;
    export function arrayColumn(array: any, columnName: any): any;
    export function arrayColumn(array: any, col: any): any;
    export function arrayUnique(array: any, removeEmpties: any): any;
    export function arrayUnique(array: any, removeEmpties: any): any;
    export function arrayMerge(ar1: any, ar2: any): any;
    export function arrayMerge(ar1: any, ar2: any): any;
    export function objectsArrayTill(arrayBlocks: any, key: any, value: any): {};
    export function objectsArrayTill(arrayBlocks: any, key: any, value: any): {};
    export function arrayRemoveEmpty(array: any): any;
    export function arrayRemoveEmpty(array: any): any;
    export function arrayLastMember(arr: any): any;
    export function arrayLastMember(arr: any): any;
    export function arrayLastItem(arr: any): any;
    export function arrayLastItem(arr: any): any;
    export function removeKeys(obj: any, keysArr: any): {};
    export function removeKeys(obj: any, keysArr: any): {};
    export function removeKeysExcept(obj: any, keysArr: any): {};
    export function removeKeysExcept(obj: any, keysArr: any): {};
    export function arrayDiff(source: any, comparedTo: any): any;
    export function arrayDiff(source: any, comparedTo: any): any;
    export function arrayIntersect(source: any, comparedTo: any): any;
    export function arrayIntersect(source: any, comparedTo: any): any;
    export function arrayDiffFull(o1: any, o2: any): any[];
    export function arrayDiffFull(o1: any, o2: any): any[];
    export function sortKeys(x: any, out?: {}): {};
    export function sortKeys(x: any, out?: {}): {};
    export function sortByValuesIntoArray(obj: any, ascending?: boolean): any;
    export function sortByValuesIntoArray(obj: any, ascending?: boolean): any;
    export function stringArrayToNumeric(arr: any): number[];
    export function stringArrayToNumeric(arr: any): number[];
    export function stringToArrayToNumeric(arr: any): number[];
    export function stringToArrayToNumeric(arr: any): number[];
    export function objectCopy(obj: any): any;
    export function objectCopy(obj: any): any;
    export function cloneObjectDestructuve(orig: any): any;
    export function cloneObjectDestructuve(orig: any): any;
    export function cloneObjectWithPrototype(orig: any): any;
    export function cloneObjectWithPrototype(orig: any): any;
    export function getKeyByValue(object: any, value: any): string | undefined;
    export function getKeyByValue(object: any, value: any): string | undefined;
    export function hasChildWithKeyValue(obj: any, targetKey: any, targetValue: any): boolean;
    export function hasChildWithKeyValue(obj: any, targetKey: any, targetValue: any): boolean;
    export function trigger_on_load(callerr: any, onInteractionInsteadComplete: any): void;
    export function trigger_on_load(callerr: any, onInteractionInsteadComplete: any): void;
    export function imagesLazyLoad(el_tag: any): void;
    export function imagesLazyLoad(el_tag: any): void;
    export function move_to_top_in_parent(el_tag: any): void;
    export function move_to_top_in_parent(el_tag: any): void;
    export function Append_To_Head2(elemntType: any, content: any): void;
    export function Append_To_Head2(elemntType: any, content: any): void;
    export function Append_To_Head(elemntType: any, content: any): void;
    export function Append_To_Head(elemntType: any, content: any): void;
    export function appendScript(url: any, callback: any, defer?: boolean): void;
    export function appendScript(url: any, callback: any, defer?: boolean): void;
    export function appendScript2(url: any): void;
    export function appendScript2(url: any): void;
    export function blackground2(): void;
    export function blackground2(): void;
    export function getFileExtension(filename: any): any;
    export function getFileExtension(filename: any): any;
    export function forEach(collection: any, callback: any, scope: any): void;
    export function forEach(collection: any, callback: any, scope: any): void;
    export function sanitize(str: any): any;
    export function sanitize(str: any): any;
    export function sanitize_key(str: any, use_dash: any): any;
    export function sanitize_key(str: any, use_dash: any): any;
    export function sanitize_key_dashed(str: any): any;
    export function sanitize_key_dashed(str: any): any;
    export function sanitize_variable_name(str: any): any;
    export function sanitize_variable_name(str: any): any;
    export function sanitize_text(str: any, use_dash?: boolean): any;
    export function sanitize_text(str: any, use_dash?: boolean): any;
    export function strip_non_word(str: any): any;
    export function strip_non_word(str: any): any;
    export function removeAllWhitespaces(content: any): any;
    export function removeAllWhitespaces(content: any): any;
    export function replaceAllOccurences(input: any, search: any, replacement: any): any;
    export function replaceAllOccurences(input: any, search: any, replacement: any): any;
    export function getVariableType(x: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "integer" | "float" | "array";
    export function getVariableType(x: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "integer" | "float" | "array";
    export function isInteger(number: unknown): boolean;
    export const isInteger: (number: unknown) => boolean;
    export function isNumeric(x: any): boolean;
    export function isNumeric(x: any): boolean;
    export function isDecimal(x: any): boolean;
    export function isDecimal(x: any): boolean;
    export function isBoolean(x: any): boolean;
    export function isBoolean(x: any): boolean;
    export function isBooleanReal(x: any): boolean;
    export function isBooleanReal(x: any): boolean;
    export function isString(x: any): boolean;
    export function isString(s: any): boolean;
    export function isString(x: any): boolean;
    export function isString(s: any): boolean;
    export function isObject(x: any): boolean;
    export function isObject(o: any): boolean;
    export function isObject(x: any): boolean;
    export function isObject(o: any): boolean;
    export function isJsonObject(data: any): boolean;
    export function isJsonObject(data: any): boolean;
    export function isArray(arg: any): arg is any[];
    export const isArray: (arg: any) => arg is any[];
    export function isSimpleVariableType(obj: any): boolean;
    export function isSimpleVariableType(obj: any): boolean;
    export function isSimpleVariableTypeName(typeName_: any): boolean;
    export function isSimpleVariableTypeName(typeName_: any): boolean;
    export function isNumericVariableType(obj: any): boolean;
    export function isNumericVariableType(obj: any): boolean;
    export function isNumericVariableTypeName(typeName_: any): boolean;
    export function isNumericVariableTypeName(typeName_: any): boolean;
    export function stringToBoolean(string: any): boolean;
    export function stringToBoolean(string: any): boolean;
    export function isException(e: any): any;
    export function isException(e: any): any;
    export function IsJsonString(str: any): boolean;
    export function IsJsonString(str: any): boolean;
    export function is_object(variable: any): boolean;
    export function is_object(variable: any): boolean;
    export function formItemsToJson(FormElement: any): {};
    export function formItemsToJson(FormElement: any): {};
    export function renameKey(obj: any, keyFrom: any, keyTo: any): any;
    export function renameKey(obj: any, keyFrom: any, keyTo: any): any;
    export function renameSubKey(obj: any, keyFrom: any, keyTo: any, strict?: boolean): any;
    export function renameSubKey(obj: any, keyFrom: any, keyTo: any, strict?: boolean): any;
    export function hasEmptyChild(obj: any): boolean;
    export function hasEmptyChild(obj: any): boolean;
    export function filterObject(obj: any, callback: any): any;
    export function filterObject(obj: any, callback: any): any;
    export function isBetween(a: any, b: any, c: any): boolean;
    export function isBetween(a: any, b: any, c: any): boolean;
    export function isBetweenEq(a: any, b: any, c: any): boolean;
    export function isBetweenEq(a: any, b: any, c: any): boolean;
    export function startsWithWhiteSpace(content: any): boolean;
    export function startsWithWhiteSpace(content: any): boolean;
    export function trimOnlyFromEnd(content: any): any;
    export function trimOnlyFromEnd(content: any): any;
    export function startsWith(content: any, what: any): any;
    export function startsWith(content: any, what: any): any;
    export function startsWithArray(content: any, array: any): boolean;
    export function startsWithArray(content: any, array: any): boolean;
    export function endsWith(content: any, what: any): any;
    export function endsWith(content: any, what: any): any;
    export function endsWithArray(content: any, array: any): boolean;
    export function endsWithArray(content: any, array: any): boolean;
    export function startLetters(str: any, amountOfLetters: any): any;
    export function startLetters(str: any, amountOfLetters: any): any;
    export function endLetters(str: any, amountOfLetters: any): any;
    export function endLetters(str: any, amountOfLetters: any): any;
    export function ConvertNumbToRoman(num: any): any;
    export function ConvertNumbToRoman(num: any): any;
    export function when_element_is_loaded(Id_or_class: any, functionname: any): void;
    export function when_element_is_loaded(Id_or_class: any, functionname: any): void;
    export function SetTitlee(title: any): void;
    export function SetTitlee(title: any): void;
    export function setUrl(urlPath: any, title: any): void;
    export function setUrl(urlPath: any, title: any): void;
    export function requestUri(url: any): any;
    export function requestUri(url: any): any;
    export function ArrayKeyExistss(keyname: any, array: any): boolean;
    export function ArrayKeyExistss(keyname: any, array: any): boolean;
    export function hashtageChangeOnClick(e: any): void;
    export function hashtageChangeOnClick(e: any): void;
    export function capitalizeFirstLetter(string: any): any;
    export function capitalizeFirstLetter(string: any): any;
    export function addQueryArg(name: any, value: any, url: any): string;
    export function addQueryArg(name: any, value: any, url: any): string;
    export function buildQueryString(params: any): any;
    export function buildQueryString(params: any): any;
    export function wpHomeUrl(): void;
    export function wpHomeUrl(): void;
    export function LoadYoutubeApi(callback: any): void;
    export function LoadYoutubeApi(callback: any): void;
    export function argvsString(): any;
    export function argvsString(): any;
    export function argvsArray(): any;
    export function argvsArray(): any;
    export function argvs(): {};
    export function argvs(): {};
    export function argv(which: any, def?: undefined): any;
    export function argv(which: any, def?: undefined): any;
    export function argvIsSet(which: any): boolean;
    export function argvIsSet(which: any): boolean;
    export function parseQuery(queryString: any): {};
    export function parseQuery(queryString: any): {};
    export function invertDictionary(obj: any): {};
    export function invertDictionary(obj: any): {};
    export function isElementInViewport(el: any): boolean;
    export function isElementInViewport(el: any): boolean;
    export function MakeIframeFullHeight(iframeElement: any, cycling: any, overwrite_margin: any): void;
    export function MakeIframeFullHeight(iframeElement: any, cycling: any, overwrite_margin: any): void;
    export function MakeIframeFullHeight(iframeElement: any, cycling: any, overwrite_margin: any): void;
    export function MakeIframeFullHeight(iframeElement: any, cycling: any, overwrite_margin: any): void;
    export function getYtIdFromURL(URLL: any): any;
    export function getYtIdFromURL(URL_or_ID: any): any;
    export function getYtIdFromURL(URLL: any): any;
    export function getYtIdFromURL(URL_or_ID: any): any;
    export function autoSizeTextareas(className: any): void;
    export function autoSizeTextareas(className: any): void;
    export function getAllMethods(obj: any, inherited_too: any): string[];
    export function getAllMethods(obj: any, inherited_too: any): string[];
    export function hasMethod(obj: any, funcName: any, inherited_too: any): boolean | null;
    export function hasMethod(obj: any, funcName: any, inherited_too: any): boolean | null;
    export function ConvertToHourMinSec(time: any): string;
    export function ConvertToHourMinSec(time: any): string;
    export function getWindowSize(): {
        x: number;
        y: number;
    };
    export function getWindowSize(): {
        x: number;
        y: number;
    };
    export function removeItem(arr: any, value: any): any;
    export function removeItem(arr: any, value: any): any;
    export function removeItemOnce(arr: any, value: any): any;
    export function removeItemOnce(arr: any, value: any): any;
    export function toggleItemInArray(array: any, value: any, condition: any): any;
    export function toggleItemInArray(array: any, value: any, condition: any): any;
    export function mergeDeep(target: any, source: any): any;
    export function mergeDeep(target: any, source: any): any;
    export function getScrollbarWidth(): number;
    export function getScrollbarWidth(): number;
    export function animationClick(element: any, animation: any, removeOrNot: any): void;
    export function animationClick(element: any, animation: any, removeOrNot: any): void;
    export function animationClickTarget(element: any, target: any, animation: any, removeOrNot: any): void;
    export function animationClickTarget(element: any, target: any, animation: any, removeOrNot: any): void;
    export namespace datetime {
        function isBetweenHMS(target: any, start: any, end: any, equality: any): void;
        function isBetweenHMS(target: any, start: any, end: any, equality: any): void;
        function equalDays(d1: any, d2: any): boolean;
        function equalDays(d1: any, d2: any): boolean;
        function IsTodayStart(dt: any): void;
        function IsTodayStart(dt: any): void;
        function GetWeekOfMonth(dt: any): void;
        function GetWeekOfMonth(dt: any): void;
        function GetWeekOfYear(dt: any): void;
        function GetWeekOfYear(dt: any): void;
        function GetQuarter(dt: any): void;
        function GetQuarter(dt: any): void;
        function NumberToHMSstring(hhmmss: any): void;
        function NumberToHMSstring(hhmmss: any): void;
        function addNumberToHMS(hhmmss: any, added_or_subtracted: any): void;
        function addNumberToHMS(hhmmss: any, added_or_subtracted: any): void;
        function DatetimeToStringUtc(dt: any, withMS?: boolean, withTZ?: boolean): string;
        function DatetimeToStringUtc(dt: any, withMS?: boolean, withTZ?: boolean): string;
        function DatetimeToStringLocal(dt: any, withMS?: boolean, withT?: boolean): any;
        function DatetimeToStringLocal(dt: any, withMS?: boolean, withT?: boolean): any;
        function StringToDatetimeUtc(str: any, format: any, culture: any): Date;
        function StringToDatetimeUtc(str: any, format: any, culture: any): Date;
        function StringToDatetimeLocal(str: any, format: any, culture: any): Date;
        function StringToDatetimeLocal(str: any, format: any, culture: any): Date;
        function StringToTimestamUtc(str: any, format: any, culture: any): number;
        function StringToTimestamUtc(str: any, format: any, culture: any): number;
        function DatetimeUtc(): Date;
        function DatetimeUtc(): Date;
        function UtcDatetime(): Date;
        function UtcDatetime(): Date;
        function TimestampUtc(): number;
        function TimestampUtc(): number;
        function UtcTimestamp(): number;
        function UtcTimestamp(): number;
        function DatetimeToTimestampUtc(dt: any): number;
        function DatetimeToTimestampUtc(dt: any): number;
        function UtcTimestampFrom(dt: any): number;
        function UtcTimestampFrom(dt: any): number;
        function TimestampUtcToDatetimeUtc(ts: any): Date;
        function TimestampUtcToDatetimeUtc(ts: any): Date;
        function UtcTimestampToUtcDatetime(ts: any): Date;
        function UtcTimestampToUtcDatetime(ts: any): Date;
        function MaxDate(d1: any, d2: any, d3?: null): void;
        function MaxDate(d1: any, d2: any, d3?: null): void;
        function MinDate(d1: any, d2: any, d3?: null): void;
        function MinDate(d1: any, d2: any, d3?: null): void;
        function localDatetimeToUtcString(dt: any): void;
        function localDatetimeToUtcString(dt: any): void;
        function areSameDays(d1: any, d2: any): void;
        function areSameDays(d1: any, d2: any): void;
        function GetDayOfYear(dt: any): any;
        function GetDayOfYear(dt: any): any;
        function StringToUtcString(str: any): any;
        function StringToUtcString(str: any): any;
        function UtcTimestampToLocalDatetime(ts: any): Date;
        function UtcTimestampToLocalDatetime(ts: any): Date;
        function UtcTimestampToUtcDatetimeString_OLD_CORRECT(epochtime: any, withTZ: any): string;
        function UtcTimestampToUtcDatetimeString_OLD_CORRECT(epochtime: any, withTZ: any): string;
        function UtcTimestampToUtcDatetimeString(epochtime: any, withTZ: any): string;
        function UtcTimestampToUtcDatetimeString(epochtime: any, withTZ: any): string;
        function getOffsetFromUtc(): number;
        function getOffsetFromUtc(): number;
        function stringToDate(str: any): Date;
        function stringToDate(str: any): Date;
        function msGoneAfter(date: any): number;
        function msGoneAfter(date: any): number;
        function getYMDHISFfromDate(dt: any, utc?: boolean): any[];
        function getYMDHISFfromDate(dt: any, utc?: boolean): any[];
        function getYMDHISFfromDateWithZeros(dt: any, utc?: boolean): {
            y: any;
            M: string;
            d: string;
            h: string;
            m: string;
            s: string;
            f: string;
        };
        function getYMDHISFfromDateWithZeros(dt: any, utc?: boolean): {
            y: any;
            M: string;
            d: string;
            h: string;
            m: string;
            s: string;
            f: string;
        };
        function prefixWithZero(num: any, digits: any): any;
        function prefixWithZero(num: any, digits: any): any;
        function currentDatetimeIs(targetDate: any): boolean;
        function currentDatetimeIs(targetDate: any): boolean;
        function dateCompare(date1: any, date2: any): 0 | 1 | -1;
        function dateCompare(date1: any, date2: any): 0 | 1 | -1;
        function dateTill(date1: any, date2: any): Date;
        function dateTill(date1: any, date2: any): Date;
        function secondsTill(date1: any, date2: any): number;
        function secondsTill(date1: any, date2: any): number;
        /**
        * Adds time to a date. Modelled after MySQL DATE_ADD function.
        * Example: dateAdd(new Date(), 'minute', 30)  //returns 30 minutes from now.
        * https://stackoverflow.com/a/1214753/18511
        *
        * @param date  Date to start with
        * @param interval  One of: year, quarter, month, week, day, hour, minute, second
        * @param units  Number of units of the given interval to add.
        */
        function add(date: any, interval: any, units: any): Date | undefined;
        /**
        * Adds time to a date. Modelled after MySQL DATE_ADD function.
        * Example: dateAdd(new Date(), 'minute', 30)  //returns 30 minutes from now.
        * https://stackoverflow.com/a/1214753/18511
        *
        * @param date  Date to start with
        * @param interval  One of: year, quarter, month, week, day, hour, minute, second
        * @param units  Number of units of the given interval to add.
        */
        function add(date: any, interval: any, units: any): Date | undefined;
        function addSeconds(date: any, seconds: any): Date;
        function addSeconds(date: any, seconds: any): Date;
        function addDays(date: any, days: any): Date;
        function addDays(date: any, days: any): Date;
        function daysBetween(a: any, b: any, utc?: boolean): number;
        function daysBetween(a: any, b: any, utc?: boolean): number;
    }
    export function spinner(action: any): void;
    export function spinner(action: any): void;
    export function contains(string: any, pattern: any): boolean;
    export function contains(string: any, pattern: any): boolean;
    export function hide_show_transprent(el: any, hide: any): void;
    export function hide_show_transprent(el: any, hide: any): void;
    export function get_extension_from_url(url: any): any;
    export function get_extension_from_url(url: any): any;
    export function occurences_amount(string: any, subString: any, allowOverlapping: any): any;
    export function occurences_amount(string: any, subString: any, allowOverlapping: any): any;
    export function readLineByLine(filePath: any, callback: any, linesSize?: number, delimiterN?: boolean): Promise<any>;
    export function readLineByLine(filePath: any, callback: any, linesSize?: number, delimiterN?: boolean): Promise<any>;
    export function linesAmountInFile(filePath: any, delimiterN?: boolean): Promise<any>;
    export function linesAmountInFile(filePath: any, delimiterN?: boolean): Promise<any>;
    export function oneSpace(cc: any): any;
    export function oneSpace(cc: any): any;
    export function removeFirstAndLastChar(cc: any): any;
    export function removeFirstAndLastChar(cc: any): any;
    export function getWithin_X(cc: any, x: any): any;
    export function getWithin_X(cc: any, x: any): any;
    export function getWithin_XY(cc: any, x: any, y: any): any;
    export function getWithin_XY(cc: any, x: any, y: any): any;
    export function removeIfOutsideQuotes(content: any, replaceWhat: any, replaceWith: any): any;
    export function removeIfOutsideQuotes(content: any, replaceWhat: any, replaceWith: any): any;
    export function splitBy_X_NotInside_Y(str: any, x: any, y: any): any;
    export function splitBy_X_NotInside_Y(str: any, x: any, y: any): any;
    export function splitBy_X_NotInside_YZ(str: any, by: any, y: any, z: any): any;
    export function splitBy_X_NotInside_YZ(str: any, by: any, y: any, z: any): any;
    export function splitOnlyFirstOccurence(str: any, what: any): any;
    export function splitOnlyFirstOccurence(str: any, what: any): any;
    export function splitByEqualNotInsideDoubleQuotes(str: any): any;
    export function splitByEqualNotInsideDoubleQuotes(str: any): any;
    export function splitByEqualNotInsideDoubleQuotesAndDoubleEquals(str: any): any;
    export function splitByEqualNotInsideDoubleQuotesAndDoubleEquals(str: any): any;
    export function splitByNotInside2(str: any, splitChar: any, notInsideCharStart: any, notInsideCharEnd: any): void;
    export function splitByNotInside2(str: any, splitChar: any, notInsideCharStart: any, notInsideCharEnd: any): void;
    export function getFromX_tillY_ExcudingQuotes(content: any, from: any, till: any, regex_index: any): string;
    export function getFromX_tillY_ExcudingQuotes(content: any, from: any, till: any, regex_index: any): string;
    export function preg_quote(str: any, delimiter: any): string;
    export function preg_quote(str: any, delimiter: any): string;
    export function escapeRegExp(string: any): any;
    export function escapeRegExp(string: any): any;
    export function splitStringIntoChars(str: any): any;
    export function splitStringIntoChars(str: any): any;
    export function empty(MyVar: any): boolean;
    export function empty(MyVar: any): boolean;
    export function is_empty_or_undefined(MyVar: any): boolean;
    export function is_empty_or_undefined(MyVar: any): boolean;
    export function isEmptyValue(input: any): boolean;
    export function isEmptyValue(input: any): boolean;
    export function removeEmptyValue(obj: any): any;
    export function removeEmptyValue(obj: any): any;
    export function isIterable(obj: any): boolean;
    export function isIterable(obj: any): boolean;
    export function insertRedErrorLine(array_: any): void;
    export function insertRedErrorLine(array_: any): void;
    export function stripTags(input: any, allowed: any): any;
    export function stripTags(input: any, allowed: any): any;
    export function br2nl(content: any): any;
    export function br2nl(content: any): any;
    export function jquery_popup(element: any, isModal: any, params: any): any;
    export function jquery_popup(element: any, isModal: any, params: any): any;
    export function jquery_popup_once(cookiename: any, key: any, text: any, duration: any, onComplete: any): void;
    export function jquery_popup_once(cookiename: any, key: any, text: any, duration: any, onComplete: any): void;
    export function jquery_popup_one_time_checkbox(cookiename: any, key: any, text: any, callable_func: any, defaultCheckboxTxt: any): void;
    export function jquery_popup_one_time_checkbox(cookiename: any, key: any, text: any, callable_func: any, defaultCheckboxTxt: any): void;
    export function dialog_dont_show_again(event: any, key: any, cookiename: any): void;
    export function dialog_dont_show_again(event: any, key: any, cookiename: any): void;
    export function dialogClose(): void;
    export function dialogClose(): void;
    export function mergeObjects(obj1: any, obj2: any): any;
    export function mergeObjects(obj1: any, obj2: any): any;
    export function objectMap(obj: any, fn: any): any;
    export function objectMap(obj: any, fn: any): any;
    export function fancyTimeFormat(time: any): string;
    export function fancyTimeFormat(time: any): string;
    export function jsonToArray(json_data: any): any[][];
    export function jsonToArray(json_data: any): any[][];
    export function fixEntitiedJson(json_data: any): any;
    export function fixEntitiedJson(json_data: any): any;
    export function setSelectByOptionName(selectEl: any, optName: any): void;
    export function setSelectByOptionName(selectEl: any, optName: any): void;
    export function ScrollTo(el: any, func: any, offset_distance: any): void;
    export function ScrollTo(el: any, func: any, offset_distance: any): void;
    export function sleep(ms: any): Promise<any>;
    export function sleep(ms: any): Promise<any>;
    export function setTimeout_safe(done: any, ms: any): () => void;
    export function setTimeout_safe(done: any, ms: any): () => void;
    export function scrollToBottom2(el: any): void;
    export function scrollToBottom2(el: any): void;
    export function scrollToBottom(el_or_id: any): void;
    export function scrollToBottom(el_or_id: any): void;
    export function scrollToBottom3(el_or_id: any): void;
    export function scrollToBottom3(el_or_id: any): void;
    export function smooth_scroll_to(selector: any): void;
    export function smooth_scroll_to(selector: any): void;
    export function addLine(selector: any, text: any, first_or_last: any): void;
    export function addLine(selector: any, text: any, first_or_last: any): void;
    export function removeLine(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
    export function removeLine(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
    export function removeElementIfMoreThan(el: any, amount: any, first_or_last: any): void;
    export function removeElementIfMoreThan(el: any, amount: any, first_or_last: any): void;
    export function removeElementIfMoreThanNEW(el: any, amount: any, first_or_last: any): any;
    export function removeElementIfMoreThanNEW(el: any, amount: any, first_or_last: any): any;
    export function removeLine_old(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
    export function removeLine_old(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
    export function removeLineFromTextarea(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
    export function removeLineFromTextarea(selector: any, first_or_last: any, ifMoreThanXlines: any): void;
    export function removeLineFromText(text: any, first_or_last: any, ifMoreThanXlines: any): any;
    export function removeLineFromText(text: any, first_or_last: any, ifMoreThanXlines: any): any;
    export function arrayPart(array_: any, amount_: any, from: any): any;
    export function arrayPart(array_: any, amount_: any, from: any): any;
    export function arrayInsertAt(array: any, index: any, value: any): any;
    export function arrayInsertAt(array: any, index: any, value: any): any;
    export function executeAfterTry(el: any, func: any, num: any): void;
    export function executeAfterTry(el: any, func: any, num: any): void;
    export function waitExecute(el: any, func: any): void;
    export function waitExecute(el: any, func: any): void;
    export function consoleLogColor(text: any, backgroundColor?: null, foregroundColor?: null): void;
    export function consoleLogColor(text: any, backgroundColor?: null, foregroundColor?: null): void;
    export function toggleWindowsMessages_WindowConfirm(): ((message?: string | undefined) => boolean) & typeof confirm;
    export function toggleWindowsMessages_WindowConfirm(): ((message?: string | undefined) => boolean) & typeof confirm;
    export function toggleWindowsMessages_WindowAlert(): ((message?: any) => void) & typeof alert;
    export function toggleWindowsMessages_WindowAlert(): ((message?: any) => void) & typeof alert;
    export function toggleWindowsMessages(enable: any): void;
    export function toggleWindowsMessages(enable: any): void;
    export function suspressMessagesExecution(func: any): void;
    export function suspressMessagesExecution(func: any): void;
    export function in_array(needle: any, haystack: any): boolean;
    export function in_array(needle: any, haystack: any): boolean;
    export function CreateFrameIn(targetEl: any, frameContent: any, MakeItfullWH: any): HTMLIFrameElement;
    export function CreateFrameIn(targetEl: any, frameContent: any, MakeItfullWH: any): HTMLIFrameElement;
    export function makeAllATargetBlank(el: any): void;
    export function makeAllATargetBlank(el: any): void;
    export function createDropdownFrom(arr: any, elementId: any, jqueriUi: any, appendToElement: any): string;
    export function createDropdownFrom(arr: any, elementId: any, jqueriUi: any, appendToElement: any): string;
    export function b64EncodeUnicode(str: any): string;
    export function b64EncodeUnicode(str: any): string;
    export function b64DecodeUnicode(str: any): string;
    export function b64DecodeUnicode(str: any): string;
    export function round(num: any, decimals: any): number;
    export function round(num: any, decimals: any): number;
    export function basename(path: any): any;
    export function basename(path: any): any;
    export function show_my_popup(TEXTorID: any, AdditionalStyles: any): void;
    export function show_my_popup(TEXTorID: any, AdditionalStyles: any): void;
    export function my_popup_closee(RandomIDD: any): void;
    export function my_popup_closee(RandomIDD: any): void;
    export function loaderImage(circleColor: any): string;
    export function loaderImage(circleColor: any): string;
    export function Loader(ShowOrHide: any, style: any, content_To_show: any): void;
    export function Loader(ShowOrHide: any, style: any, content_To_show: any): void;
    export function myyAjaxRequest(parameters: any, url: any, method: any, func: any, ShowBlackground: any): void;
    export function myyAjaxRequest(parameters: any, url: any, method: any, func: any, ShowBlackground: any): void;
    export function hide_popuping_divs(classnameee: any): void;
    export function hide_popuping_divs(classnameee: any): void;
    export function get(url: any, parameters: any): Promise<any>;
    export function get(url: any, parameters: any): Promise<any>;
    export function getJSON(url: any, parameters: any): Promise<any>;
    export function getJSON(url: any, parameters: any): Promise<any>;
    export function post(url: any, params: any, callback_1: any, callback_2: any): Promise<void>;
    export function post(url: any, params: any, callback_1: any, callback_2: any): Promise<void>;
    export function stringifyPretty(obj: any): string;
    export function stringifyPretty(obj: any): string;
    export function responseStringify(obj_or_text: any): any;
    export function responseStringify(obj_or_text: any): any;
    export function getElementById_FROM_PARENT(req: any): any;
    export function getElementById_FROM_PARENT(req: any): any;
    export function inArray(needle: any, haystack: any): boolean;
    export function inArray(needle: any, haystack: any): any;
    export function inArray(needle: any, haystack: any): boolean;
    export function inArray(needle: any, haystack: any): any;
    export function inKeys(key: any, obj: any): boolean;
    export function inKeys(key: any, obj: any): boolean;
    export function partialObject(object_: any, array_: any): {};
    export function partialObject(object_: any, array_: any): {};
    export function array_column_with_keys(object_: any, keyName_: any): {};
    export function array_column_with_keys(object_: any, keyName_: any): {};
    export function GetQueryParams(url: any): {};
    export function GetQueryParams(url: any): {};
    export function URLParser(url: any): {
        getHost: () => string;
        getHostName: () => string;
        getPath: () => string;
        getHash: () => string;
        getParams: () => any;
        getQuery: () => string;
        setHash: (value: any) => string;
        setParam: (name: any, value: any) => string;
        getParam: (name: any) => string | undefined;
        hasParam: (name: any) => true | undefined;
        removeParam: (name: any) => string;
    };
    export function URLParser(url: any): {
        getHost: () => string;
        getHostName: () => string;
        getPath: () => string;
        getHash: () => string;
        getParams: () => any;
        getQuery: () => string;
        setHash: (value: any) => string;
        setParam: (name: any, value: any) => string;
        getParam: (name: any) => string | undefined;
        hasParam: (name: any) => true | undefined;
        removeParam: (name: any) => string;
    };
    export function parsePOST(request: any, callback: any): void;
    export function parsePOST(request: any, callback: any): void;
    export function ChangeSocialShareUrls(elemnt: any, newurl: any, title: any): void;
    export function ChangeSocialShareUrls(elemnt: any, newurl: any, title: any): void;
    export function ReplaceParameterInQuery(url: any, param_name: any, param_new_val: any): any;
    export function ReplaceParameterInQuery(url: any, param_name: any, param_new_val: any): any;
    export function refferer_is_same_domain(): boolean;
    export function refferer_is_same_domain(): boolean;
    export function DoPrevent(e: any): void;
    export function DoPrevent(e: any): void;
    export function preventDefaultForAll(instantly: any): void;
    export function preventDefaultForAll(instantly: any): void;
    export function addHovered(elem: any): void;
    export function addHovered(elem: any): void;
    export function radiobox_onchange_hider(selector: any, desiredvalue: any, target_hidding_selector: any, SHOW_or_hide: any, ...args: any[]): void;
    export function radiobox_onchange_hider(selector: any, desiredvalue: any, target_hidding_selector: any, SHOW_or_hide: any, ...args: any[]): void;
    export function GetRandomFromArray(my_array: any): any;
    export function GetRandomFromArray(my_array: any): any;
    export function array_shuffle(array: any): any;
    export function array_shuffle(array: any): any;
    export function showYtVideo(options: any): void;
    export function showYtVideo(options: any): void;
    export function FadeOut_modalpp(): void;
    export function FadeOut_modalpp(): void;
    export function forEachDefine(): void;
    export function forEachDefine(): void;
    export function forEachDefine2(): void;
    export function forEachDefine2(): void;
    export function filterDefine(): void;
    export function filterDefine(): void;
    export function filterDefine2(): void;
    export function filterDefine2(): void;
    export function var_dump(array: any): void;
    export function var_dump(array: any): void;
    export function postForm(params: any, ConfirmMessage: any, path: any, method: any, targett: any): void;
    export function postForm(params: any, ConfirmMessage: any, path: any, method: any, targett: any): void;
    export function SetShowHint(elemnt: any, text: any, left: any, top: any): void;
    export function SetShowHint(elemnt: any, text: any, left: any, top: any): void;
    export function Balance_Target_Image(img: any, widthh: any, heightt: any): void;
    export function Balance_Target_Image(img: any, widthh: any, heightt: any): void;
    export function Balanced_Image_proportions(classname: any, widthh: any, heightt: any, parentClassname: any): void;
    export function Balanced_Image_proportions(classname: any, widthh: any, heightt: any, parentClassname: any): void;
    export function show_after_pageload(el: any): void;
    export function show_after_pageload(el: any): void;
    export function hide_after_pageload(el: any): void;
    export function hide_after_pageload(el: any): void;
    export function Highlight_Current_Menu_link(Added_class_name: any, Ancestor_to_search_in: any, link_to_find: any): void;
    export function Highlight_Current_Menu_link(Added_class_name: any, Ancestor_to_search_in: any, link_to_find: any): void;
    export function RemoveHashString(str: any): any;
    export function RemoveHashString(str: any): any;
    export function arrayRemoveValue(array: any, value: any): any[];
    export function arrayRemoveValue(array: any, value: any): any[];
    export function getCharsFromStart(str: any, amount: any): any;
    export function getCharsFromStart(str: any, amount: any): any;
    export function getCharsFromEnd(str: any, amount: any): any;
    export function getCharsFromEnd(str: any, amount: any): any;
    export function GetTopLeft(myyElement: any): {
        lefttt: number;
        toppp: number;
    };
    export function GetTopLeft(myyElement: any): {
        lefttt: number;
        toppp: number;
    };
    export function GetOffset(object: any, offset: any): void;
    export function GetOffset(object: any, offset: any): void;
    export function GetScrolled(object: any, scrolled: any): void;
    export function GetScrolled(object: any, scrolled: any): void;
    export function MakeFixed(selector: any, ExtraHeightToBody: any): void;
    export function MakeFixed(selector: any, ExtraHeightToBody: any): void;
    export function triggerWhenElementInView(el: any, func: any): void;
    export function triggerWhenElementInView(el: any, func: any): void;
    export function compare(a: any, operator: any, b: any): boolean;
    export function compare(a: any, operator: any, b: any): boolean;
    export function calculate(a: any, operator: any, b: any): any;
    export function calculate(a: any, operator: any, b: any): any;
    export function RandomNum(maxNum: any): number;
    export function RandomNum(maxNum: any): number;
    export function random_number(Length: any): number;
    export function random_number(Length: any): number;
    export function randomNumber(Length: any): number;
    export function randomNumber(Length: any): number;
    export function random_number_minmax(min: any, max: any): any;
    export function random_number_minmax(min: any, max: any): any;
    export function randomString(Length: any): string;
    export function randomString(Length: any): string;
    export function shuffle_Word(word: any): string;
    export function shuffle_Word(word: any): string;
    export function youtubeImage(id: any, quality: any): string;
    export function youtubeImage(id: any, quality: any): string;
    export function IsMobileDevice(simpleORfull: any): any;
    export function IsMobileDevice(simpleORfull: any): any;
    export function backToTopBind(el: any): void;
    export function backToTopBind(el: any): void;
    export function enable_jquery_errors(): void;
    export function enable_jquery_errors(): void;
    export function telegramMessage(text: any, chat_id: any, bot_key: any, extra_opts?: {}): Promise<any>;
    export function telegramMessage(text: any, chat_id: any, bot_key: any, extra_opts?: {}): Promise<any>;
    export const telegram_interval_ms: number;
    export const telegram_last_sent_time: number;
    export function telegramMessageCached(text: any, chat_id: any, bot_key: any, extra_opts?: {}, customCacheId?: null): Promise<any>;
    export function telegramMessageCached(text: any, chat_id: any, bot_key: any, extra_opts?: {}, customCacheId?: null): Promise<any>;
    export function openUrlInBrowser(url: any): void;
    export function openUrlInBrowser(url: any): void;
    export function stringify(obj_or_str: any): any;
    export function stringify(obj_or_str: any): any;
    export function stringify_plain(data: any): string;
    export function stringify_plain(data: any): string;
    export function CopyObject(obj: any): any;
    export function CopyObject(obj: any): any;
    export function uniqId(obj_or_str: any): any;
    export function uniqId(obj_or_str: any): any;
    export function stringifyWithUndefined(obj: any): string;
    export function stringifyWithUndefined(obj: any): string;
    export function md5(str: any): any;
    export function md5(str: any): any;
    export function jsonConcat(o1: any, o2: any): any;
    export function jsonConcat(o1: any, o2: any): any;
    export function fetch(url: any, postOptions?: null, opts?: {}): Promise<string>;
    export function fetch(url: any, postOptions?: null, opts?: {}): Promise<string>;
    export function getRemoteData(url: any, postOptions?: null, opts?: {}): Promise<string>;
    export function getRemoteData(url: any, postOptions?: null, opts?: {}): Promise<string>;
    export function unTrailingSlash(str: any): any;
    export function unTrailingSlash(str: any): any;
    export function trailingSlash(str: any): string;
    export function trailingSlash(str: any): string;
    export const privateAppName__: null;
    export function setAppName(name: any): void;
    export function setAppName(name: any): void;
    export function getAppName(): never;
    export function getAppName(): never;
    export namespace Cookies {
        function get(a: any, b: any): any;
        function get(a: any, b: any): any;
        function set(a: any, b: any, c: any): any;
        function set(a: any, b: any, c: any): any;
        function remove(a: any, b: any): any;
        function remove(a: any, b: any): any;
        function append(name: any, value: any, attributes: any): any;
        function append(name: any, value: any, attributes: any): any;
        function isset(cookiename: any): boolean;
        function isset(cookiename: any): boolean;
        function getOption(cookieName: any, key: any, defaultValue: any): any;
        function getOption(cookieName: any, key: any, defaultValue: any): any;
        function setOption(cookieName: any, key: any, value: any, attributes: any): {};
        function setOption(cookieName: any, key: any, value: any, attributes: any): {};
        function removeOption(cookieName: any, key: any, attributes: any): {};
        function removeOption(cookieName: any, key: any, attributes: any): {};
        function getOptionObject(cookieName: any, key: any): any;
        function getOptionObject(cookieName: any, key: any): any;
        function setOptionObject(cookieName: any, key: any, subKey: any, subValue: any): void;
        function setOptionObject(cookieName: any, key: any, subKey: any, subValue: any): void;
        function setOptionArray(cookieName: any, key: any, subValue: any, Add_or_remove: any): void;
        function setOptionArray(cookieName: any, key: any, subValue: any, Add_or_remove: any): void;
        function cookies_instance(): null;
        function cookies_instance(): null;
        const cookies_inited: null;
        function cookies(): any;
    }
    export namespace cache {
        export function helper_read(groupName: any, storageType: any, expireSeconds?: number): any;
        export function helper_read(groupName: any, storageType: any, expireSeconds?: number): any;
        export function helper_write(groupName: any, content: any, storageType: any): true | undefined;
        export function helper_write(groupName: any, content: any, storageType: any): true | undefined;
        export function helper_delete(groupName: any, storageType: any): true | undefined;
        export function helper_delete(groupName: any, storageType: any): true | undefined;
        export function get(groupName: any, defaultVal?: null, storageType?: string, expireSeconds?: number): any;
        export function get(groupName: any, defaultVal?: null, storageType?: string, expireSeconds?: number): any;
        export function set(groupName: any, content: any, storageType?: string): void;
        export function set(groupName: any, content: any, storageType?: string): void;
        function _delete(groupName: any, storageType?: string): void;
        export function _delete(groupName: any, storageType?: string): void;
        export { _delete as delete };
        export function getChild(groupName: any, optName: any, defaultVal?: null, storageType?: string, expireSeconds?: number): any;
        export function getChild(groupName: any, optName: any, defaultVal?: null, storageType?: string, expireSeconds?: number): any;
        export function setChild(groupName: any, optName: any, val: any, storageType?: string): void;
        export function setChild(groupName: any, optName: any, val: any, storageType?: string): void;
        export function deleteChild(groupName: any, optName: any, storageType?: string): void;
        export function deleteChild(groupName: any, optName: any, storageType?: string): void;
        export namespace file {
            const customCacheDir: null;
            function get_dir(): string;
            function get_dir(): string;
            function set_dir(dir: any, auto_clear_seconds?: null): any;
            function set_dir(dir: any, auto_clear_seconds?: null): any;
            function filePath(uniqFileName: any): any;
            function filePath(uniqFileName: any): any;
            function get(uniqFileName: any, defaultContent?: string, expire_seconds?: number, decode?: boolean): any;
            function get(uniqFileName: any, defaultContent?: string, expire_seconds?: number, decode?: boolean): any;
            function set(uniqFileName: any, content: any): void;
            function set(uniqFileName: any, content: any): void;
            const containerDefaultPrefix: string;
            const tempIds: {};
            function idForContent(slugOrContent: any): any;
            function idForContent(slugOrContent: any): any;
            function existsId(containerSlug: any, id: any): boolean;
            function existsId(containerSlug: any, id: any): boolean;
            function getIds(containerSlug: any): any;
            function getIds(containerSlug: any): any;
            function setIds(containerSlug: any, idsDict: any): void;
            function setIds(containerSlug: any, idsDict: any): void;
            function addId(containerSlug: any, id: any): void;
            function addId(containerSlug: any, id: any): void;
            function addIdIfNotExists(containerSlug: any, id: any): boolean;
            function addIdIfNotExists(containerSlug: any, id: any): boolean;
        }
    }
    export namespace file_1 {
        export function fs(): any;
        export function fs(): any;
        export function os(): any;
        export function os(): any;
        export function path(): any;
        export function path(): any;
        export function tempDir(): string;
        export function tempDir(): string;
        export function exists(filePath: any): any;
        export function exists(filePath: any): any;
        export function mtime(filePath: any): any;
        export function mtime(filePath: any): any;
        function _delete(filePath: any): any;
        export function _delete(filePath: any): any;
        export { _delete as delete };
        export function unlink(filePath: any): any;
        export function unlink(filePath: any): any;
        export function createDirectory(dirPath: any): any;
        export function createDirectory(dirPath: any): any;
        export function read(filePath: any, defaultContent?: string): any;
        export function read(filePath: any, defaultContent?: string): any;
        export function write(filePath: any, content: any): void;
        export function write(filePath: any, content: any): void;
        export function getFilesListFromDir(dir: any): any[];
        export function getFilesListFromDir(dir: any): any[];
    }
    export { file_1 as file };
    export function catchUnhandledExceptions(callback: any): void;
    export function catchUnhandledExceptions(callback: any): void;
    export const keys: {
        (o: object): string[];
        (o: {}): string[];
    };
    export function values(x: any): any;
    export function values(x: any): any;
    export function extend(...args: any[]): any;
    export function extend(...args: any[]): any;
    export function clone(x: any): any;
    export function clone(x: any): any;
    export function index(x: any): Set<any>;
    export function index(x: any): Set<any>;
    export function ordered(x: any): any;
    export function ordered(x: any): any;
    export function unique(x: any): any[];
    export function unique(x: any): any[];
    export function arrayConcat(a: any, b: any): any;
    export function arrayConcat(a: any, b: any): any;
    export function toArray(object: any): any;
    export function toArray(object: any): any;
    export function isEmpty(object: any): boolean;
    export function isEmpty(object: any): boolean;
    export function keysort(x: any, out?: {}): {};
    export function keysort(x: any, out?: {}): {};
    export function indexBy(x: any, k: any, out?: {}): {};
    export function indexBy(x: any, k: any, out?: {}): {};
    export function groupBy(x: any, k: any, out?: {}): {};
    export function groupBy(x: any, k: any, out?: {}): {};
    export function filterBy(x: any, k: any, value?: undefined, out?: any[]): any[];
    export function filterBy(x: any, k: any, value?: undefined, out?: any[]): any[];
    export function sortBy(array: any, key: any, descending?: boolean, direction?: number): any;
    export function sortBy(array: any, key: any, descending?: boolean, direction?: number): any;
    export function sortBy2(array: any, key1: any, key2: any, descending?: boolean, direction?: number): any;
    export function sortBy2(array: any, key1: any, key2: any, descending?: boolean, direction?: number): any;
    export function flatten(x: any, out?: any[]): any[];
    export function flatten(x: any, out?: any[]): any[];
    export function pluck(x: any, k: any): any;
    export function pluck(x: any, k: any): any;
    export function omit(x: any, ...args: any[]): any;
    export function omit(x: any, ...args: any[]): any;
    export function sum(...xs: any[]): any;
    export function sum(...xs: any[]): any;
    export function deepExtend(...xs: any[]): any;
    export function deepExtend(...xs: any[]): any;
    export const isNumber: (number: unknown) => boolean;
    export function hasProps(o: any): boolean;
    export function hasProps(o: any): boolean;
    export function isRegExp(o: any): boolean;
    export function isRegExp(o: any): boolean;
    export function isDictionary(o: any): boolean;
    export function isDictionary(o: any): boolean;
    export function isStringCoercible(x: any): any;
    export function isStringCoercible(x: any): any;
    export function prop(o: any, k: any): any;
    export function prop(o: any, k: any): any;
    export function getValueFromKeysInArray(object: any, array: any): any;
    export function getValueFromKeysInArray(object: any, array: any): any;
    export function asFloat(x: any): number;
    export function asFloat(x: any): number;
    export function asInteger(x: any): number;
    export function asInteger(x: any): number;
    export function parseTimeframe(timeframe: any): number;
    export function parseTimeframe(timeframe: any): number;
    export function roundTimeframe(timeframe: any, timestamp: any, direction?: any): number;
    export function roundTimeframe(timeframe: any, timestamp: any, direction?: any): number;
    export function json(data: any, params?: undefined): string;
    export function json(data: any, params?: undefined): string;
    export function isJsonEncodedObject(object: any): boolean;
    export function isJsonEncodedObject(object: any): boolean;
    export function encode_html_entities(content: any): any;
    export function encode_html_entities(content: any): any;
    export function precisionFromString(string: any): any;
    export function precisionFromString(string: any): any;
    export function numberToString(x: any): any;
    export function numberToString(x: any): any;
    export const isBrowser: boolean;
    export const isElectron: boolean;
    export const isWebWorker: boolean;
    export const isWindows: boolean;
    export const isNode: boolean;
    export const defaultFetch: typeof globalThis.fetch;
    export function uuid(a: any): any;
    export function uuid(a: any): any;
    export function capitalize(s: any): any;
    export function capitalize(s: any): any;
    export function strip(s: any): any;
    export function strip(s: any): any;
    export const now: () => number;
    export const milliseconds: () => number;
    export function seconds(): number;
    export function seconds(): number;
}
//# sourceMappingURL=library_standard.d.ts.map